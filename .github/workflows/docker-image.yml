name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: |
        docker build .  --tag workshop-container:latest
        docker images

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Download Artifact
      run: |
        wget https://cli.artifactscan.cloudone.trendmicro.com/tmas-cli/latest/tmas-cli_Linux_x86_64.tar.gz
        tar -xzvf tmas-cli_Linux_x86_64.tar.gz

    - name: Image Scanning 
      env:
        TMAS_API_KEY: ${{ secrets.TMAS_API_KEY }}
      run: |
        ./tmas scan registry:alejogaci/workshop-container:latest@sha256:7a837351b4532b4808e1314d10c4dc80c45613c5f85c2fc72eaf0d98e4dcf39f -VMS --saveSBOM > results.json --override overrides.yml

    - name: Upload Json as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: generated-json
        path: results.json  

    - name: To CSV
      run: |
        wget https://raw.githubusercontent.com/alejogaci/CS-ArtifactScanner-Report/refs/heads/main/export_report_tmas.py https://raw.githubusercontent.com/XeniaP/CS-ArtifactScanner-Report/refs/heads/main/requirements.txt
        pip install -r requirements.txt && mkdir TM_Artifact_Scanner_Report_vulnerables
        python export_report_tmas.py vulnerables/web-dvwa --resultFile results.json
          
    - name: Upload xlsx as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: generated-xlsx
        path: TM_Artifact_Scanner_Report_vulnerables/*.xlsx


    - name: Push
      run: |
        docker tag workshop-container:latest alejogaci/workshop-container:latest
        docker push alejogaci/workshop-container:latest
        docker images


  sign:
    name: Sign Image with Cosign
    runs-on: ubuntu-latest
    needs: build   # ← este job solo corre si el build fue exitoso
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Sign image with Cosign (Key-based)
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          echo "${{ secrets.COSIGN_KEY }}" > cosign.key
          cosign sign --key cosign.key --yes --tlog-upload=false alejogaci/workshop-container:latest@sha256:7a837351b4532b4808e1314d10c4dc80c45613c5f85c2fc72eaf0d98e4dcf39f


